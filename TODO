do rest of Chapter 2 Parsing exercises, once we have output instead of just recognition
-#4 - parseNumber with different bases
-#5 - character literals
-#6 - floats/decimals
-#7 - full Scheme numeric tower ()

Chapter 2 Recursive Parsing exercises
-#1 - backquoting
-#2 - vectors (after implementing set!)
-#3 - left-factor grammar so common part of list/dotted list is its own parser

Chapter 3 exercises
-#1 - type-testing
-#2 - unpackNum should return 0 for non-numbers
-#3 - add symbol-handling functions

Chapter 4
-Control.Monad.Error is deprecated; use Control.Monad.Except instead
-add type annotation for trapError: is ThrowsError String -> ThrowsError String correct?

Chapter 5
-#1 - if should only accept Bool values (check if R5RS Scheme does this)
-#2 - fix bug in equal? to recursive use equal? instead of eqv?
-#3 - implement cond and case
-#4 - add remaining string functions, except for string-set!

Chapter 6 
-have REPL use haskeline (https://hackage.haskell.org/package/haskeline)